using Test, PyCall
np = pyimport("numpy")
include("./../src/QAOA.jl")

@testset "SK model easy" begin
    J = np.array([
                  [ 0.        ,  0.42132292, -0.25571582, -0.16267926, -0.77219702,
                    0.06310006,  0.03975859,  0.14472543,  0.52842128,  0.2399146 ,
                  -0.5426827 ],
                  [ 0.42132292,  0.        , -0.04705895, -0.28587394,  0.50008779,
                    0.19371417,  0.43070882,  0.21708425, -0.09432905, -0.07647162,
                    0.0410539 ],
                  [-0.25571582, -0.04705895,  0.        ,  0.04119337, -0.03143317,
                  -0.69452537, -0.20650927,  0.03894435, -0.03114271,  0.31022423,
                  -0.25880392],
                  [-0.16267926, -0.28587394,  0.04119337,  0.        ,  0.46391918,
                  -0.46363437, -0.02663793,  0.05954145, -0.35251299, -0.13726513,
                  -0.07634969],
                  [-0.77219702,  0.50008779, -0.03143317,  0.46391918,  0.        ,
                    0.07847923,  0.18372387, -0.47860755, -0.24819476,  0.27132491,
                  -0.22750873],
                  [ 0.06310006,  0.19371417, -0.69452537, -0.46363437,  0.07847923,
                    0.        ,  0.01450035,  0.29893034,  0.12659777, -0.20628129,
                  -0.17935806],
                  [ 0.03975859,  0.43070882, -0.20650927, -0.02663793,  0.18372387,
                    0.01450035,  0.        ,  0.51434209, -0.13210798,  0.28592817,
                    0.1470975 ],
                  [ 0.14472543,  0.21708425,  0.03894435,  0.05954145, -0.47860755,
                    0.29893034,  0.51434209,  0.        , -0.250012  ,  0.0366756 ,
                  -0.59322573],
                  [ 0.52842128, -0.09432905, -0.03114271, -0.35251299, -0.24819476,
                    0.12659777, -0.13210798, -0.250012  ,  0.        ,  0.26835453,
                    0.00088238],
                  [ 0.2399146 , -0.07647162,  0.31022423, -0.13726513,  0.27132491,
                  -0.20628129,  0.28592817,  0.0366756 ,  0.26835453,  0.        ,
                  -0.48081058],
                  [-0.5426827 ,  0.0410539 , -0.25880392, -0.07634969, -0.22750873,
                  -0.17935806,  0.1470975 , -0.59322573,  0.00088238, -0.48081058,
                    0.        ]])

    # schedule
    p = 2000
    τ = 0.5
    γ = τ .* ((1:p) .- 1/2) ./ p |> collect
    β = τ .* (1 .- (1:p) ./ p) |> collect
    β[p] = τ / (4 * p)

    problem = QAOA.Problem(p, J)
    lyapunov_exponent = QAOA.evolve_fluctuations(problem, τ, β, γ)

    lyapunov_exponent_test = np.array([-0.00292733, -0.00275409, -0.00193802, -0.00127588, -0.00114502,
                                       -0.00089046, -0.00068273, -0.00035155, -0.00024733, -0.00019835,
                                        0.00019835,  0.00024733,  0.00035155,  0.00068273,  0.00089046,
                                        0.00114502,  0.00127588,  0.00193802,  0.00275409,  0.00292733])

    @test lyapunov_exponent[end] ≈ lyapunov_exponent_test rtol = 1e-5                                           
end

@testset "SK model hard" begin
  J = np.array([
                [ 0.        ,  0.20437418,  0.18668785, -0.42714492, -0.49929211,
                  -0.05025879, -0.08892105, -0.39034422,  0.45183176,  0.13354867,
                  0.15657114],
                [ 0.20437418,  0.        ,  0.47448795, -0.11285034, -0.19304397,
                  -0.54407782, -0.10369845, -0.35005243,  0.56644052,  0.07814467,
                  -0.23853172],
                [ 0.18668785,  0.47448795,  0.        ,  0.09938403, -0.66523568,
                  -0.19274242, -0.08422971,  0.16213894, -0.03594969,  0.05643456,
                  0.03460391],
                [-0.42714492, -0.11285034,  0.09938403,  0.        , -0.14651126,
                  -0.57655351, -0.06858528,  0.02506287,  0.15807228, -0.05411843,
                  0.10554402],
                [-0.49929211, -0.19304397, -0.66523568, -0.14651126,  0.        ,
                  -0.42172937, -0.07213464,  0.19051599,  0.29572682, -0.46951685,
                  -0.01001654],
                [-0.05025879, -0.54407782, -0.19274242, -0.57655351, -0.42172937,
                  0.        ,  0.22313245, -0.11621411, -0.58635984, -0.24611057,
                  -0.32501641],
                [-0.08892105, -0.10369845, -0.08422971, -0.06858528, -0.07213464,
                  0.22313245,  0.        , -0.3046252 , -0.0152095 , -0.22280432,
                  -0.43076371],
                [-0.39034422, -0.35005243,  0.16213894,  0.02506287,  0.19051599,
                  -0.11621411, -0.3046252 ,  0.        , -0.64309655,  0.24139295,
                  -0.11473274],
                [ 0.45183176,  0.56644052, -0.03594969,  0.15807228,  0.29572682,
                  -0.58635984, -0.0152095 , -0.64309655,  0.        , -0.09709491,
                  -0.39243752],
                [ 0.13354867,  0.07814467,  0.05643456, -0.05411843, -0.46951685,
                  -0.24611057, -0.22280432,  0.24139295, -0.09709491,  0.        ,
                  0.43852014],
                [ 0.15657114, -0.23853172,  0.03460391,  0.10554402, -0.01001654,
                  -0.32501641, -0.43076371, -0.11473274, -0.39243752,  0.43852014,
                  0.        ]])

  # schedule
  p = 5000
  τ = 0.5
  γ = τ .* ((1:p) .- 1/2) ./ p |> collect
  β = τ .* (1 .- (1:p) ./ p) |> collect
  β[p] = τ / (4 * p)

  problem = QAOA.Problem(p, J)
  lyapunov_exponent = QAOA.evolve_fluctuations(problem, τ, β, γ)

  lyapunov_exponent_test = np.array([-0.00827196, -0.0031224 , -0.00137491, -0.00121955, -0.00080722,
                                     -0.00070528, -0.00059945, -0.00056264, -0.00036761, -0.00012877,
                                      0.00012877,  0.00036761,  0.00056264,  0.00059945,  0.00070528,
                                      0.00080722,  0.00121955,  0.00137491,  0.0031224 ,  0.00827196])

  @test lyapunov_exponent[end] ≈ lyapunov_exponent_test rtol = 1e-5                                           
end